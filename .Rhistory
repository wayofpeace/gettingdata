demo()
demo(glm.vr)
myfunction <- function() {
x<-rnorm(100)
mean(x)
}
x
function(10)
function()
q
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl,destfile="gdp.csv")
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl,destfile="educ.csv")
gdpdata<-read.csv("gdp.csv")
educdata<-read.csv("educ.csv")
gdpdata<-gdpdata[gdpdata$X!="",]
gdpdata$CountryCode<-gdpdata$X
gdpdata$X<-NULL
nd<-merge(gdpdata,educdata,by="CountryCode")
nd<-nd[nd$Gross.domestic.product.2012!="",]
nd<-nd[nd$Gross.domestic.product.2012!="<NA>",]
nd<-nd[!is.na(nd$Gross.domestic.product.2012),]
nd<-nd[sort(nd$Gross.domestic.product.2012,decreasing=TRUE),]
head(educdata[,1:5])
head(gdpdata[,1:5])
head(nd[,1:5])
head(nd[,1:15])
nd[,1:15]
nd<-sort(nd$Gross.domestic.product.2012,decreasing=TRUE)
nd[1:5,1:15]
nd[5,1:15]
head(nd[,1:5])
gdpdata$CountryCode<-gdpdata$X
gdpdata$X<-NULL
nd<-merge(gdpdata,educdata,by="CountryCode")
nd<-nd[nd$Gross.domestic.product.2012!="",]
nd<-nd[nd$Gross.domestic.product.2012!="<NA>",]
nd<-nd[!is.na(nd$Gross.domestic.product.2012),]
nd<-sort(nd,nd$Gross.domestic.product.2012,decreasing=TRUE)
gdpdata<-read.csv("gdp.csv")
educdata<-read.csv("educ.csv")
gdpdata<-gdpdata[gdpdata$X!="",]
gdpdata$CountryCode<-gdpdata$X
gdpdata$X<-NULL
nd<-merge(gdpdata,educdata,by="CountryCode")
nd<-nd[nd$Gross.domestic.product.2012!="",]
nd<-nd[nd$Gross.domestic.product.2012!="<NA>",]
nd<-nd[!is.na(nd$Gross.domestic.product.2012),]
nd<-sort(nd,nd$Gross.domestic.product.2012,decreasing=TRUE)
View(nd)
View(nd)
nd<-nd[order(-nd$Gross.domestic.product.2012,)]
nd<-nd[order(-nd$Gross.domestic.product.2012),]
nd<-nd[order(Gross.domestic.product.2012),]
nd[order(nd$Gross.domestic.product.2012),]
nd2<-nd[order(nd$Gross.domestic.product.2012),]
head(nd2[,1:5])
class(nd$Gross.domestic.product.2012)
head(nd2[,1:10])
head(nd2[,1:5],15)
nd2<-nd[order(as.numeric(nd$Gross.domestic.product.2012)),]
head(nd2[,1:5],15)
as.numeric(nd$Gross.domestic.product.2012)
nd$gdp<-as.numeric(nd$Gross.domestic.product.2012)
nd2<-nd[order(nd$gdp),]
head(nd2[,1:5],15)
nd$gdp<-as.integer(nd$Gross.domestic.product.2012)
nd2<-nd[order(nd$gdp),]
gdpdata<-read.csv("gdp.csv")
nd2$gdp
nd2<-nd[order(-nd$gdp),]
head(nd2[,1:5])
head(nd2[,1:5],15)
nd<-merge(gdpdata,educdata,by="CountryCode")
gdpdata<-read.csv("gdp.csv")
educdata<-read.csv("educ.csv")
gdpdata<-gdpdata[gdpdata$X!="",]
gdpdata$CountryCode<-gdpdata$X
gdpdata$X<-NULL
nd<-merge(gdpdata,educdata,by="CountryCode")
nd<-nd[nd$Gross.domestic.product.2012!="",]
nd<-nd[nd$Gross.domestic.product.2012!="<NA>",]
View(nd)
nd<-nd[!is.na(nd$Gross.domestic.product.2012),]
nd$gdp<-as.integer(nd$Gross.domestic.product.2012)
class(nd$gdp)
nd[order(-nd$gdp),]
nd[order(-nd$gdp),15]
nd2[nd2$CountryCode,13)
nd2[nd2$CountryCode,13]
View(nd2)
nd$gdp<-as.integer(nd$Gross.domestic.product.2012)
View(nd)
nd$gdp<-as.numeric(nd$Gross.domestic.product.2012)
View(nd)
gdpdata$CountryCode<-gdpdata$X
gdpdata$X<-NULL
nd<-merge(gdpdata,educdata,by="CountryCode")
nd<-nd[nd$Gross.domestic.product.2012!="",]
nd<-nd[nd$Gross.domestic.product.2012!="<NA>",]
nd<-nd[!is.na(nd$Gross.domestic.product.2012),]
nd$gdp<-as.numeric(nd$Gross.domestic.product.2012)
nd2<-nd[order(-nd$gdp),]
gdpdata<-read.csv("gdp.csv")
educdata<-read.csv("educ.csv")
gdpdata<-gdpdata[gdpdata$X!="",]
gdpdata$CountryCode<-gdpdata$X
gdpdata$X<-NULL
nd<-merge(gdpdata,educdata,by="CountryCode")
nd<-nd[nd$Gross.domestic.product.2012!="",]
nd<-nd[nd$Gross.domestic.product.2012!="<NA>",]
nd<-nd[!is.na(nd$Gross.domestic.product.2012),]
nd$gdp<-as.numeric(nd$Gross.domestic.product.2012)
nd2<-nd[order(-nd$gdp),]
View(nd2)
nd<-merge(gdpdata,educdata,by="CountryCode")
nd<-nd[nd$Gross.domestic.product.2012!="",]
nd<-nd[nd$Gross.domestic.product.2012!="<NA>",]
nd<-nd[!is.na(nd$Gross.domestic.product.2012),]
nd$gdpc<-as.character(nd$Gross.domestic.product.2012)
nd$gdp<-as.numeric(nd$gdpc)
View(nd)
nd2<-nd[order(-nd$gdp),]
View(nd2)
head(nd2)
head(nd2,13)
head(nd2,13)
aggregate(nd2$gdp,list(nd2$Income.Group),mean)
nd2$quintgdp<-quantile(nd2$gdp,.2)
View(nd2)
nd2$quintgdp<-prob(nd2$gdp,.2)
nd2$quintgdp<-cut(nd2$gdp,5)
View(nd2)
table(nd2$quintgdp,nd2$Income.Group)
## This R script uses smartphone data and does the following.
## Merges the training and the test sets to create one data set.
## Extracts only the measurements on the mean and standard deviation for each measurement.
## Uses descriptive activity names to name the activities in the data set
## Appropriately labels the data set with descriptive variable names.
## From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# Read in training and test data along with variable labels
setwd("C:/Users/Lulu/gettingdata")
testdata<-read.table("UCI HAR Dataset/test/X_test.txt")
traindata<-read.table("UCI HAR Dataset/train/X_train.txt")
featuresdata<-read.table("UCI HAR Dataset/features.txt")
activitylabels<-read.table("UCI HAR Dataset/activity_labels.txt")
activitylabels$subject<-activitylabels$V1
activitylabels$subjectlabel<-activitylabels$V2
subjecttestdata<-read.table("UCI HAR Dataset/test/subject_test.txt")
subjecttraindata<-read.table("UCI HAR Dataset/train/subject_train.txt")
subjecttestdata$subject<-subjecttestdata$V1
subjecttraindata$subject<-subjecttraindata$V1
subjecttestdata$V1<-NULL
subjecttraindata$V1<-NULL
testactivities<-read.table("UCI HAR Dataset/test/y_test.txt")
trainactivities<-read.table("UCI HAR Dataset/train/y_train.txt")
testactivities$activity<-testactivities$V1
trainactivities$activity<-trainactivities$V1
testactivities$V1<-NULL
trainactivities$V1<-NULL
# Combine test and training data sets together to create one data set
combdata<-rbind(testdata,traindata)
## Extracting only the measurements on the mean and standard deviation for each measurement.
# Select variables with -mean- in the variable name
featuresdata$meancols<-grepl("mean()",featuresdata$V2)
featuresdata$stdcols<-grepl("std()",featuresdata$V2)
# Create list of variables to select and select from combined data
meanvars <- featuresdata$V1[featuresdata$meancols==TRUE]
stdvars <-featuresdata$V1[featuresdata$stdcols==TRUE]
selectvars<-c(meanvars,stdvars)
selectdata<-combdata[selectvars ]
## Appropriately labels the data set with descriptive variable names.
# use labels from features.txt data set provided by dataset authors
varlabels<-substr(featuresdata$V2,1,50)
varlabels<-gsub("-",".",varlabels)
for(i in 1:561)
{
name <- paste("V", i, sep = "")
names(selectdata)[names(selectdata) == name] <- varlabels[i]
}
# use camelCase for variable names
# substitute dashes with periods in variable names
# remove parentheses in variable names
names(selectdata)<-gsub("-",".",names(selectdata))
names(selectdata)<-gsub("\\()","",names(selectdata))
## Rename activities in the data set using descriptive activity names
# use activity labels provided by dataset authors
testdatalabels<-cbind(subjecttestdata,testactivities)
traindatalabels<-cbind(subjecttraindata,trainactivities)
datalabels<-rbind(testdatalabels,traindatalabels)
selectdata<-cbind(datalabels,selectdata)
selectdata$activity <- factor(selectdata$activity,
levels = activitylabels$subject,
labels = activitylabels$subjectlabel)
## Creates an independent tidy data set with the average of each variable for each activity and each subject.
# create a tiday data set where:
#   Each variable you measure should be in one column,
#   Each different observation of that variable should be in a different row
#create means of each variable
tidydata<-aggregate(selectdata[,3:81], list(selectdata$subject,selectdata$activity), mean)
tidydata$subject<-tidydata$Group.1
tidydata$activity<-tidydata$Group.2
tidydata$Group.1<-NULL
tidydata$Group.2<-NULL
#reorder columns to make data tidier
tidydata<-cbind(tidydata$activity,tidydata$subject,tidydata[1:79])
write.table(tidydata, file="C:/Users/Lulu/gettingdata/project/tidydata.txt", row.name=FALSE)
# Read in training and test data along with variable labels
setwd("C:/Users/Lulu/gettingdata/project")
testdata<-read.table("UCI HAR Dataset/test/X_test.txt")
traindata<-read.table("UCI HAR Dataset/train/X_train.txt")
featuresdata<-read.table("UCI HAR Dataset/features.txt")
activitylabels<-read.table("UCI HAR Dataset/activity_labels.txt")
activitylabels$subject<-activitylabels$V1
activitylabels$subjectlabel<-activitylabels$V2
subjecttestdata<-read.table("UCI HAR Dataset/test/subject_test.txt")
subjecttraindata<-read.table("UCI HAR Dataset/train/subject_train.txt")
subjecttestdata$subject<-subjecttestdata$V1
subjecttraindata$subject<-subjecttraindata$V1
subjecttestdata$V1<-NULL
subjecttraindata$V1<-NULL
testactivities<-read.table("UCI HAR Dataset/test/y_test.txt")
trainactivities<-read.table("UCI HAR Dataset/train/y_train.txt")
testactivities$activity<-testactivities$V1
trainactivities$activity<-trainactivities$V1
testactivities$V1<-NULL
trainactivities$V1<-NULL
# Combine test and training data sets together to create one data set
combdata<-rbind(testdata,traindata)
## Extracting only the measurements on the mean and standard deviation for each measurement.
# Select variables with -mean- in the variable name
featuresdata$meancols<-grepl("mean()",featuresdata$V2)
featuresdata$stdcols<-grepl("std()",featuresdata$V2)
# Create list of variables to select and select from combined data
meanvars <- featuresdata$V1[featuresdata$meancols==TRUE]
stdvars <-featuresdata$V1[featuresdata$stdcols==TRUE]
selectvars<-c(meanvars,stdvars)
selectdata<-combdata[selectvars ]
## Appropriately labels the data set with descriptive variable names.
# use labels from features.txt data set provided by dataset authors
varlabels<-substr(featuresdata$V2,1,50)
varlabels<-gsub("-",".",varlabels)
for(i in 1:561)
{
name <- paste("V", i, sep = "")
names(selectdata)[names(selectdata) == name] <- varlabels[i]
}
# use camelCase for variable names
# substitute dashes with periods in variable names
# remove parentheses in variable names
names(selectdata)<-gsub("-",".",names(selectdata))
names(selectdata)<-gsub("\\()","",names(selectdata))
## Rename activities in the data set using descriptive activity names
# use activity labels provided by dataset authors
testdatalabels<-cbind(subjecttestdata,testactivities)
traindatalabels<-cbind(subjecttraindata,trainactivities)
datalabels<-rbind(testdatalabels,traindatalabels)
selectdata<-cbind(datalabels,selectdata)
selectdata$activity <- factor(selectdata$activity,
levels = activitylabels$subject,
labels = activitylabels$subjectlabel)
## Creates an independent tidy data set with the average of each variable for each activity and each subject.
# create a tiday data set where:
#   Each variable you measure should be in one column,
#   Each different observation of that variable should be in a different row
#create means of each variable
tidydata<-aggregate(selectdata[,3:81], list(selectdata$subject,selectdata$activity), mean)
tidydata$subject<-tidydata$Group.1
tidydata$activity<-tidydata$Group.2
tidydata$Group.1<-NULL
tidydata$Group.2<-NULL
#reorder columns to make data tidier
tidydata<-cbind(tidydata$activity,tidydata$subject,tidydata[1:79])
write.table(tidydata, file="C:/Users/Lulu/gettingdata/project/tidydata.txt", row.name=FALSE)
names(tidydata)
View(tidydata)
vals<-names(tidydata)
vals
###################################################################################
# This R script uses smartphone data and does the following.
# 1 Merges the training and the test sets to create one data set.
# 2 Extracts only the measurements on the mean and standard deviation
#     for each measurement.
# 3 Uses descriptive activity names to name the activities in the data set
# 4 Appropriately labels the data set with descriptive variable names.
# 5 From the data set in step 4, creates a second, independent tidy data set
#     with the average of each variable for each activity and each subject.
###################################################################################
###################################################################################
# Read in training and test data along with variable labels
###################################################################################
setwd("C:/Users/Lulu/gettingdata/project")
testdata<-read.table("UCI HAR Dataset/test/X_test.txt")
traindata<-read.table("UCI HAR Dataset/train/X_train.txt")
featuresdata<-read.table("UCI HAR Dataset/features.txt")
activitylabels<-read.table("UCI HAR Dataset/activity_labels.txt")
activitylabels$subject<-activitylabels$V1
activitylabels$subjectlabel<-activitylabels$V2
subjecttestdata<-read.table("UCI HAR Dataset/test/subject_test.txt")
subjecttraindata<-read.table("UCI HAR Dataset/train/subject_train.txt")
subjecttestdata$subject<-subjecttestdata$V1
subjecttraindata$subject<-subjecttraindata$V1
subjecttestdata$V1<-NULL
subjecttraindata$V1<-NULL
testactivities<-read.table("UCI HAR Dataset/test/y_test.txt")
trainactivities<-read.table("UCI HAR Dataset/train/y_train.txt")
testactivities$activity<-testactivities$V1
trainactivities$activity<-trainactivities$V1
testactivities$V1<-NULL
trainactivities$V1<-NULL
# Combine test and training data sets together to create one data set
combdata<-rbind(testdata,traindata)
###################################################################################
# Extracting only the measurements on the mean and standard deviation
#   for each measurement.
###################################################################################
# Select variables with -mean- and -std- in the variable name
featuresdata$meancols<-grepl("mean()",featuresdata$V2)
featuresdata$stdcols<-grepl("std()",featuresdata$V2)
# Create list of variables to select and select from combined data
meanvars <- featuresdata$V1[featuresdata$meancols==TRUE]
stdvars <-featuresdata$V1[featuresdata$stdcols==TRUE]
selectvars<-c(meanvars,stdvars)
selectdata<-combdata[selectvars ]
###################################################################################
## Appropriately label the data set with descriptive variable names.
###################################################################################
# use labels from features.txt data set provided by dataset authors
varlabels<-substr(featuresdata$V2,1,50)
varlabels<-gsub("-",".",varlabels)
for(i in 1:561)
{
name <- paste("V", i, sep = "")
names(selectdata)[names(selectdata) == name] <- varlabels[i]
}
# use camelCase for variable names
# substitute dashes with periods in variable names
# remove parentheses in variable names
names(selectdata)<-gsub("-",".",names(selectdata))
names(selectdata)<-gsub("\\()","",names(selectdata))
###################################################################################
## Rename activities in the data set using descriptive activity names
###################################################################################
# use activity labels provided by dataset authors
testdatalabels<-cbind(subjecttestdata,testactivities)
traindatalabels<-cbind(subjecttraindata,trainactivities)
datalabels<-rbind(testdatalabels,traindatalabels)
selectdata<-cbind(datalabels,selectdata)
selectdata$activity <- factor(selectdata$activity,
levels = activitylabels$subject,
labels = activitylabels$subjectlabel)
###################################################################################
# Creates an independent tidy data set with the average of each variable for each
#   activity (6) and each subject (30).
###################################################################################
# create a tidy data set where:
#   Each variable you measure should be in one column,
#   Each different observation of that variable should be in a different row
#create means of each variable
tidydata<-aggregate(selectdata[,3:81], list(selectdata$subject,selectdata$activity), mean)
tidydata$subject<-tidydata$Group.1
tidydata$activity<-tidydata$Group.2
tidydata$Group.1<-NULL
tidydata$Group.2<-NULL
#reorder columns to make data tidier
tidydata<-cbind(tidydata$activity,tidydata$subject,tidydata[1:79])
# write out data to a text file
write.table(tidydata, file="C:/Users/Lulu/gettingdata/project/tidydata.txt", row.name=FALSE)
